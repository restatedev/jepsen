name: Jepsen tests
on:
  workflow_dispatch:
    inputs:
      retainCluster:
        description: 'Keeps the AWS Jepsen worker cluster running after the test is complete. Subsequent test runs will reuse it.'
        required: false
        type: boolean
#      restateCommit:
#        description: 'Restate commit - we will download the Docker image produced by its CI workflow'
#        required: false
#        default: ''
#        type: string
      restatePr:
        description: 'Restate PR number - we will download the Docker image produced by its CI workflow'
        required: false
        default: ''
        type: string
#      restateRunId:
#        description: 'Restate CI workflow run id'
#        required: true
#        default: ''
#        type: string
      workloads:
        description: 'List of workloads to run'
        required: true
        default: 'set-mds'
        type: string
      nemeses:
        description: 'List of nemeses to apply'
        required: false
        type: string
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  jepsen-tests:
    runs-on: warp-ubuntu-latest-x64-2x
    concurrency:
      group: singleton

    steps:
      - uses: actions/checkout@v4

#      - uses: extractions/setup-just@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - uses: actions/setup-node@v4
#        with:
#          node-version: "22"
#
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#
#      - uses: DeLaGuardo/setup-clojure@13.0
#        with:
#          lein: 2.11.2
#
#      - run: sudo apt-get update && sudo apt-get install -y gnuplot-nox
#
#      - name: Build SDK services
#        run: just make-services

      - name: Download Restate Docker image
        if: ${{ (inputs.restateCommit != '' || inputs.restatePr != '') && github.event_name == 'workflow_dispatch' }}
        uses: dawidd6/action-download-artifact@v8
        with:
          repo: restatedev/restate
          workflow: ci.yml
          pr: ${{ inputs.restatePr }}
          commit: ${{ inputs.restateCommit }}
          name: restate.tar

      - name: Test run Restate image on build worker
        if: ${{ (inputs.restateCommit != '' || inputs.restatePr != '') && github.event_name == 'workflow_dispatch' }}
        run: |
          output=$(docker load --input restate.tar)
          docker tag "${output#*: }" "localhost/restatedev/restate-commit-download:latest"
          docker image ls -a
          docker run localhost/restatedev/restate-commit-download:latest --help

      # TODO: restrict the cluster to only be accessible to the build worker
      #- run: curl -s https://checkip.amazonaws.com

#      - uses: aws-actions/configure-aws-credentials@v4
#        with:
#          # Co-locate the cluster with WarpBuild:
#          aws-region: us-east-1
#          role-to-assume: arn:aws:iam::339713187748:role/github-restatedev-jepsen-actions-role

#      - name: Create test cluster
#        id: create-cluster
#        run: just create-aws-cluster

#      - name: Run Jepsen tests
#        id: jepsen-tests
#        run: |
#          if [ -f restate.tar ]; then
#            DOCKER_IMAGE_ARGS='--image localhost/restatedev/restate-commit-download:latest --image-tarball restate.tar'
#          else
#            DOCKER_IMAGE_ARGS='--image ghcr.io/restatedev/restate:main'
#          fi
#
#          STATUS=0
#
#          for WORKLOAD in ${{ inputs.workloads || 'set-vo' }}; do
#            for NEMESIS in ${{ inputs.nemeses || 'none partition-random-node' }}; do
#              echo "::group::Jepsen workload: ${WORKLOAD} nemesis: ${NEMESIS}"
#
#              lein run test \
#                --nodes-file aws/nodes.txt --username admin --ssh-private-key aws/private-key.pem \
#                --workload ${WORKLOAD} --nemesis ${NEMESIS} \
#                ${DOCKER_IMAGE_ARGS} \
#                --time-limit 30 --rate 10 --concurrency 5n
#
#              if [ $? -ne 0 ]; then
#                STATUS=1
#              fi
#
#              echo "::endgroup::"
#            done
#          done
#
#          exit ${STATUS}
#        timeout-minutes: 10

#      - name: Upload Jepsen output
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: jepsen-store
#          path: store

#      # TODO: update this to destroy by default after testing
#      - name: Destroy cluster
#        if: ${{ always() && !(inputs.retainCluster || true) }}
#        run: just destroy-aws-cluster
