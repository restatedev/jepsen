name: Restate Jepsen tests
description: "Run Restate Jepsen tests"
inputs:
  ref:
    description: 'Git ref to use for test suite'
    required: false
    default: ''
  restateImageId:
    description: 'Restate image (ignored if PR set)'
    required: false
    default: 'ghcr.io/restatedev/restate:main'
  restatePr:
    description: 'Use CI Docker image from PR (ignored if commit is set)'
    required: false
  restateCommit:
    description: 'Use CI Docker image from Restate commit'
    required: false
  roleArn:
    description: 'AWS role to assume'
    required: true
    default: 'arn:aws:iam::339713187748:role/github-restatedev-jepsen-actions-role'
  clusterName:
    description: 'Jepsen workers cluster AWS stack name'
    required: true
  testConfig:
    description: 'Jepsen test run configuration'
    required: false
    default:  '{ "workloads": "set-vo", "nemeses": "partition-random-node", "duration": "60", "rate": "10", "concurrency": "5n", "testCount": "1" }'
  retainCluster:
    description: 'Retain the AWS worker node cluster after test'
    required: false

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v4
      with:
        repository: restatedev/jepsen
        ref: ${{ inputs.ref }}
        path: jepsen

    - uses: extractions/setup-just@v2

    - uses: actions/setup-node@v4
      with:
        node-version: "22"

    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - uses: DeLaGuardo/setup-clojure@13.0
      with:
        lein: 2.11.2

    - name: Build SDK services
      working-directory: ./jepsen
      run: just make-services
      shell: bash

    # support importing oci-format restate.tar
    - name: Set up Docker containerd snapshotter
      if: ${{ (inputs.restateCommit != '' || inputs.restatePr != '') && github.event_name == 'workflow_dispatch' }}
      uses: crazy-max/ghaction-setup-docker@v3
      with:
        set-host: true
        daemon-config: |
          {
            "features": {
              "containerd-snapshotter": true
            }
          }
    - name: Download Restate Docker image
      if: ${{ (inputs.restateCommit != '' || inputs.restatePr != '') && github.event_name == 'workflow_dispatch' }}
      uses: dawidd6/action-download-artifact@v3
      with:
        repo: restatedev/restate
        workflow: ci.yml
        pr: ${{ inputs.restatePr }}
        commit: ${{ inputs.restateCommit }}
        name: restate.tar
        path: ./jepsen
    - name: Check downloaded Restate Docker image is runnable
      if: ${{ (inputs.restateCommit != '' || inputs.restatePr != '') && github.event_name == 'workflow_dispatch' }}
      shell: bash
      working-directory: ./jepsen
      run: |
        output=$(docker load --input restate.tar)
        docker tag "${output#*: }" "localhost/restatedev/restate-commit-download:latest"
        docker image ls -a
        docker run localhost/restatedev/restate-commit-download:latest --version

    - name: Prepare environment for Jepsen control node
      shell: bash
      working-directory: ./jepsen
      run: |
        echo "::group::Install Jepsen dependencies (apt)"
        sudo apt-get update && sudo apt-get install -y gnuplot-nox
        echo "::endgroup::"

        echo "::group::Fetch Clojure dependencies (lein)"
        lein deps
        echo "::endgroup::"

    # TODO: can we use snapshots to speed up the worker environment prep up to this point?

    - uses: aws-actions/configure-aws-credentials@v4
      with:
        # Co-locate the cluster with WarpBuild:
        aws-region: us-east-1
        role-to-assume: ${{ inputs.roleArn }}

    - name: Create test cluster
      shell: bash
      id: create-cluster
      working-directory: ./jepsen
      run: |
        SOURCE_IP=$(curl -s https://checkip.amazonaws.com)
        just create-aws-cluster "${{ inputs.clusterName }}" "${SOURCE_IP}/32"

    - name: Run Jepsen tests
      id: jepsen-tests
      shell: bash
      working-directory: ./jepsen
      run: |
        set +e

        if [ -f restate.tar ]; then
          JEPSEN_RESTATE_IMAGE='localhost/restatedev/restate-commit-download:latest --image-tarball restate.tar'
        else
          JEPSEN_RESTATE_IMAGE='${{ inputs.restateImageId || 'ghcr.io/restatedev/restate:main' }}'
        fi

        STATUS=0

        for WORKLOAD in ${{ fromJSON(inputs.testConfig).workloads || 'set-vo' }}; do
          for NEMESIS in ${{ fromJSON(inputs.testConfig).nemeses || 'partition-random-node' }}; do
            echo "::group::Jepsen workload: ${WORKLOAD} nemesis: ${NEMESIS}"

            lein run test \
              --nodes-file aws/nodes.txt \
              --username admin \
              --ssh-private-key aws/private-key.pem \
              --workload ${WORKLOAD} --nemesis ${NEMESIS} \
              --image ${JEPSEN_RESTATE_IMAGE} \
              --time-limit ${{ fromJSON(inputs.testConfig).duration || 30 }} \
              --rate ${{ fromJSON(inputs.testConfig).rate || 10 }} \
              --concurrency ${{ fromJSON(inputs.testConfig).concurrency || '5n' }} \
              --test-count ${{ fromJSON(inputs.testConfig).testCount || '1' }} \
              --leave-db-running ${{ inputs.retainCluster || 'false' }}

            if [ $? -ne 0 ]; then
              STATUS=1
              echo "::error::Test workload: ${WORKLOAD} nemesis: ${NEMESIS} failed"
            fi

            echo "::endgroup::"
          done
        done

        exit ${STATUS}

    - name: Upload Jepsen output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jepsen-store
        path: ./jepsen/store

    # TODO: update this to destroy by default after testing
    - name: Destroy cluster
      shell: bash
      if: ${{ always() && !(inputs.retainCluster || true) }}
      working-directory: ./jepsen
      run: just destroy-aws-cluster "${{ inputs.clusterName }}"
